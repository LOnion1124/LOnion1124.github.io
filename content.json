{"meta":{"title":"LOnion's blog","subtitle":"","description":"","author":"LOnion","url":"https://LOnion1124.github.io","root":"/"},"pages":[{"title":"","date":"2024-11-13T13:30:23.156Z","updated":"2024-11-13T13:30:23.156Z","comments":true,"path":"gallery/index.html","permalink":"https://lonion1124.github.io/gallery/","excerpt":"","text":"陈列室 正在建设中……"},{"title":"","date":"2025-07-02T05:36:27.879Z","updated":"2024-11-13T13:30:09.886Z","comments":true,"path":"about/index.html","permalink":"https://lonion1124.github.io/about/","excerpt":"","text":"关于本站 正在建设中……"}],"posts":[{"title":"SICP知识点拾遗","slug":"SICP知识点拾遗","date":"2025-07-06T04:00:00.000Z","updated":"2025-08-11T00:20:10.876Z","comments":true,"path":"posts/2cb9b20100f1/","permalink":"https://lonion1124.github.io/posts/2cb9b20100f1/","excerpt":"基于NUS的SICP课程框架整理SICP中值得注意的知识点，面向不提供SICP课程作为计算机基础课程的大学（比如浙大）。","text":"著名的CS自学网站CS自学指南的首页就提到过这门传奇的编程入门课程——SICP。在该网页内提供的版本是加州伯克利大学的线上学习资源。 这门课程并不将重点放在某一个具体的编程语言上，而是更多关注编写程序本身的通用范式，从通用计算机处理语言的逻辑入手，帮助初学者快速上手，开启编程之旅。 笔者在新加坡国立大学举办的暑校中全程参与了SICP课程，NUS版本的SICP基于该校学生自主构建的JavaScript实验平台SourceAcademy，使用JS的子语言Source（由开发者创立），良好的前端性质赋予了这门课程更人性化的程序交互功能（比如逐步实现程序）。这里顺便贴出笔者完成的课程设计：一个2048小游戏的化学同位素版本，在此处可以直接体验（点击左上角Run按钮，在右侧切换到游戏窗口视图（第四个））。代码在上述链接和Github仓库都可以查看。这个游戏的灵感来源于Isotopic256。 对于至少接触过一个学期的CS专业课的同学而言，这门课程应该确实是略显基础了，极大部分内容，哪怕学校课程并没有明确指出，在实际编程的过程中也应该自主体会过了（比如内存模型和变量生存周期之类）。 基于以上原因，我利用参与这门课程的无聊时间整理了一些值得记忆或了解的知识点，供已经有一些编程基础，但是又对这门课程感兴趣的同学们快速补全。 Recursion：递归的进一步探讨 SICP指出，递归不仅仅是一个函数调用它自己，或者说在此基础上可以做出一种分类，即迭代过程和递归过程，这两种方式的关键区别在于是否产生函数栈堆积。 概念辨析： 递归函数：在函数体内部直接或者间接调用自身的函数。 递归过程（Recursive Process）：通过一系列延迟的运算操作实现的程序运行过程。 迭代过程（：不含有延迟的运算操作而实现的程序运行过程。 一个递归函数的实现可能是通过递归过程，也可能是通过迭代过程。 来看经典的递归例子——阶乘计算： function factorial(n) &#123; return n === 0 ? 1 : n * factorial(n - 1); &#125; 这个例子是一个递归过程，因为当前步骤需要在子步骤完成之后在进行计算，这就是“延迟的”运算操作。 再来看阶乘计算的另一种实现方式： function factorial(n) &#123; return fact_iter(1, 1, n); &#125; function fact_iter(product, counter, max_count) &#123; return counter &gt; max_count ? product : fact_iter(counter * product, counter + 1, max_count); &#125; 我们发现在这段代码中，虽然函数调用了自己，但是当前的返回值没有任何需要在子步骤计算完成之后额外计算的内容（即先前的函数调用不需要堆积在栈内存里等待递归结束），因此这个过程是一个线性迭代过程。 将递归过程转换为迭代过程 一般来说，新建一个Helper function迭代函数，记录迭代状态和当前结果，然后将递归函数函数做成顶层函数，调用迭代函数的初态。可以将上例封装起来（注意迭代函数只需要记录两个参数）： function factorial(n) &#123; function iter(product, counter) &#123; return counter &gt; n ? product : iter(counter * product, counter + 1); &#125; return iter(1, 1); &#125; 下面介绍一种更普适的编程思想（风格），可以将一般递归转化为尾递归（即迭代过程）。 Continuation Passing Style：递归的CPS风格 可以参考这篇博客。 简单来说，CPS也是通过实现一个迭代函数完成的，与之前的方法的区别在于以下两点： CPS的迭代顺序是逆序的（从n到1），与普通递归顺序一致。 CPS通过一个匿名函数描述当前的迭代状态。具体地说，这个函数包括了从当前状态到最终结果需要进行的一切步骤。 CPS可以把任何递归函数变成尾递归（见下文），可以保证在一定程度上避免栈溢出（对于支持尾递归优化的编译器而言）。 从第二点可以看出，程序最终的返回值就是把最终的状态函数作用在初值上。 举个例子： function factorial_cps(n, cont) &#123; return n === 1 ? cont(1) : factorial_cps(n - 1, x =&gt; cont(n * x)); &#125; function factorial(n) &#123; return factorial_cps(n, x =&gt; x); &#125; 上例实现了阶乘函数，重点在于理解递归的传入参数x =&gt; cont(n * x)这一步骤。根据假设，此处的x代表的是之后的递归过程得到的结果，此处可以理解为已经计算好的n - 1的阶乘，那么在这一步我们要对这个结果做的事情就是乘上n，然后将其扔进现有的cont函数供后续处理。 从上例我们可以看出，CPS维护的参数函数的特征是：接入一个参数，返回一个参数。 对于较为复杂的递归方程，比如需要调用两次子递归得到现态的斐波那契数列： \\[ f(n) = f(n - 1) + f(n - 2), f(0) = 0 \\] 我们也可以把它转化成CPS风格，但需要进行一些转化以便维持cont函数的性质： function fib_cps(n, cont) &#123; return n === 0 ? cont(0) : n === 1 ? cont(1) : fib_cps(n - 1, x =&gt; fib_cps(n - 2, y =&gt; cont(x + y))); &#125; function fib(n) &#123; return fib_cps(n, x =&gt; x); &#125; 可以证明，对于任意的递归方程，我们都可以通过某种方式用CPS风格将其实现。这就是为什么CPS是一种风格而不是算法。它只是我们实现递归的众多方式之一。 Higher Order Functions：函数式编程基础 函数可以作为另一个函数的输入/返回值。外层函数成为Higher Order Function。 function sum(term, a, next, b) &#123; return a &gt; b ? 0 : term(a) + sum(term, next(a), next, b); &#125; function cube(x) &#123; return x * x * x; &#125; function add_one(x) &#123; return x + 1; &#125; sum(cube, 3, add_one, 5); // Calculates 3^3 + 4^3 + 5^3 以上是一个简易的使用函数式思想的例子，实现了自定义处理方式和迭代方法的累加器。 函数嵌套定义 在代码块中（包括函数定义内部）可以定义其他函数，使其仅在该函数内部可见。 function sum(term, a, next, b) &#123; function cube(x) &#123; return x * x * x; &#125; function add_one(x) &#123; return x + 1; &#125; return a &gt; b ? 0 : term(a) + sum(term, next(a), next, b); &#125; sum(cube, 3, add_one, 5); // Calculates 3^3 + 4^3 + 5^3 在封装功能时可以使用此特性。 匿名函数 出现了！是野生的lambda函数。 在Source语言中，匿名函数的定义方法如下： 列出参数（多参数使用小括号括起） 列出返回值（多条语句使用大括号括起） 使用=&gt;连接 使用匿名函数改写上例： function sum(term, a, next, b) &#123; return a &gt; b ? 0 : term(a) + sum(term, next(a), next, b); &#125; sum(x =&gt; x * x * x, 3, x =&gt; x + 1, 5); // Calculates 3^3 + 4^3 + 5^3 多参数函数改写格式： (x, y) =&gt; x + y 函数体包含多行： x =&gt; &#123;const y = x * x * x; return y;&#125; 函数作为返回值 字面意思，返回一个函数即可。 下例创建一个自定义步长的迭代器： function create_adder(n) &#123; function adder(x) &#123; return x + n; &#125; return adder; &#125; 使用匿名函数： function create_adder(n) &#123; return x =&gt; x + n; &#125; 支持嵌套调用： create_adder(4)(22); // Evaluate to 26 一个有趣的例子：重复应用n次函数，体现了函数式和递归的结合： function repeat(f, n) &#123; return n === 1 ? x =&gt; f(x) : x =&gt; f(repeat(f, n - 1)(x)); &#125; function add(x) &#123; return x + 1; &#125; function square(x) &#123; return x * x; &#125; repeat(add, 5)(1); // Gets 6 = 1+1+1+1+1+1 repeat(square, 3)(2); // Gets 256 = ((2^2)^2)^2 Data Abstaction 介绍了一些简单的数据封装概念，可以看成是数据结构的前置内容。由于大部分内容都比较基础，这里仅挑选了一些有趣的例子和知识点进行说明。 简单的例子：pair 给出一个基于函数式的数对结构（pair）的有趣实现方法： function make_pair(x, y) &#123; return component =&gt; component === 0 ? x : y; &#125; function head(p) &#123; return p(0); &#125; function tail(p) &#123; return p(1); &#125; const p = make_pair(3, 6); display(head(p)); // Gets 3 display(tail(p)); // Gets 6 有区别于一般的思路（把数据结构封装成对象），这里把数据结构做成了一个函数，基于输入实现不同的功能，对于用户而言，效果是一样的。 另一种更抽象的实现方式： const pair = (x, y) =&gt; f =&gt; f(x, y); const head = p =&gt; p((x, y) =&gt; x); const tail = p =&gt; p((x, y) =&gt; y); const p = pair(3, 6); display(head(p)); // Gets 3 display(tail(p)); // Gets 6 这里的数对依然是函数，但是这个函数接受一个函数作为输入，并把两个数据传入输入的函数中，因此要获得第一个数据或者第二个数据就需要通过传入不同的函数（比如接入两个参数返回第一个）实现。 这里也可以看出功能封装在编程中的体现：功能一致，实现方式可以不同。 用pair实现list：这就是链表 显然如果用pair去维护pair我们就可以维护更多数据了，列表定义如下： 一个列表（list）是空的（null），或者一个pair，它的tail是一个列表。 像这样：pair(1, pair(2, pair(3, pair(4, pair(5, null))))) 从内存模型上看，就是通过链表结构维护的线性表。显然，这种写法暗示了我们可以通过递归的方式遍历链表（而不是常用的for循环）。事实上，在Source语言的前两个章节，根本没有变量和循环可以使用（只能说确实是为编程基础教育设计出来的语言）。 （二叉）树 SICP接着介绍了如何使用pair维护tree。由于一个pair只能储存两个数据（抽象的或者不抽象的），基于这种方式实现的结构必然是二叉树（不考虑FirstChild-NextSibling方法表示的多叉树）。甚至，由于如果存了两个数据就没有多余的地方存放指向子节点的指针，这棵二叉树只能在度小于等于1的节点上存放数据。 叶子节点的tail指针指向null，因此这棵树满足：在所有度小于等于1的节点存有有且仅有一个相应类型的数据。 给出递归形式的定义： 一个树（tree）是空的（null），或者是一个pair，它的head是一个数据或者一棵树，tail是一棵树。 在这种语义下，树的结构事实上是一种嵌套链表。 注意根据定义，一个树只能维护一种固定的数据类型（而在多态语义下的链表，根据上述定义方式可以维护多种类型，有点像元组）。 处理树的基本算法此处也不多赘述，基本全部会在数据结构系列的课程中涵盖。 二分查找，二叉搜索树（BST）和其他 数据结构的基本内容，此处不多赘述。有需要的可以阅读鹤翔万里的笔记本或者OI Wiki，挑合适的内容看就行。 然后关于课程里提到的符号处理，浙大计算机系的同学应该会惊喜的发现这是FDS课程的一个经典Project“自动求导机”的简化版（只有加乘运算和单参数）。有需要的同学可以看一看我的实现。 SICP工具库 NUS的历代学生开发并维护了一堆用于SICP的工具库，文档可以在这里查看。 Curves：图形库 SICP提供了一个简单的用于实现曲线的图形库。 一个曲线是具有如下性质的函数： 接受一个范围在[0, 1]的浮点参数 返回一个点对象（实现决定） 实验环境预置了图形库，图形库接口的使用方法并不是课程关心的内容，细节可以参阅文档，这里不多赘述。 一个简单的绘制2D曲线的例子： import &#123;make_point, draw_connected_full_view, x_of, y_of&#125; from &quot;curve&quot;; function circle(t) &#123; return make_point(math_cos(2 * math_PI * t), math_sin(2 * math_PI * t)); &#125; function spiral_rep(rep, t) &#123; const p = circle(t * rep % 1.0); const r = t; return make_point(r * x_of(p), r * y_of(p)); &#125; function get_spiral_rep(rep) &#123; return t =&gt; spiral_rep(rep, t); &#125; draw_connected_full_view(200)(get_spiral_rep(3)); 效果如下： Sound：声音库 事实上，生成音符就是生成对应的波形。SICP提供了对应的解析工具用于播放，我们需要做的就是把想要播放的音符做成正弦函数，参数的变化范围就是对应的时长（秒），因此可以注意到正弦函数里的系数乘上了\\(2\\pi\\)。 比如生成标准音： const pitch_A_wave = t =&gt; math_sin(2 * math_PI * 440 * t); // A4 const pitch_A = make_sound(pitch_A_wave, 1.5); play(pitch_A); 生成和弦（也就是正选波的叠加），注意通过振幅调整音量： const C_maj_chord_wave = t =&gt; 0.33 * math_sin(2 * math_PI * 261.63 * t) + // C4 0.33 * math_sin(2 * math_PI * 329.63 * t) + // E4 0.33 * math_sin(2 * math_PI * 392.00 * t); // G4 const C_maj_chord = make_sound(C_maj_chord_wave, 1.5); play(C_maj_chord); 拼接成旋律（也就是分段函数）： const doremi_wave = t =&gt; t &lt; 0.5 ? math_sin(2 * math_PI * 261.63 * t) // C4 : t &lt; 1.0 ? math_sin(2 * math_PI * 293.66 * t) // D4 : math_sin(2 * math_PI * 329.63 * t); // E4 const doremi = make_sound(doremi_wave, 1.5); play(doremi); 这里贴一个音名频率对照表： 音符 频率(hz) 音符 频率(hz) 音符 频率(hz) 音符 频率(hz) C0 16.35 C2 65.41 C4 261.63 C6 1046.50 C#0 17.32 C#2 69.30 C#4 277.18 C#6 1108.73 D0 18.35 D2 73.42 D4 293.66 D6 1174.66 D#0 19.45 D#2 77.78 D#4 311.13 D#6 1244.51 E0 20.60 E2 82.41 E4 329.63 E6 1318.51 F0 21.83 F2 87.31 F4 349.23 F6 1396.91 F#0 23.12 F#2 92.50 F#4 369.99 F#6 1479.98 G0 24.50 G2 98.00 G4 392.00 G6 1567.98 G#0 25.96 G#2 103.83 G#4 415.30 G#6 1661.22 A0 27.50 A2 110.00 A4 440.00 A6 1760.00 A#0 29.14 A#2 116.54 A#4 466.16 A#6 1864.66 B0 30.87 B2 123.47 B4 493.88 B6 1975.53 C1 32.70 C3 130.81 C5 523.25 C7 2093.00 C#1 34.65 C#3 138.59 C#5 554.37 D1 36.71 D3 146.83 D5 587.33 D#1 38.89 D#3 155.56 D#5 622.25 E1 41.20 E3 164.81 E5 659.25 F1 43.65 F3 174.61 F5 698.46 F#1 46.25 F#3 185.00 F#5 739.99 G1 49.00 G3 196.00 G5 783.99 G#1 51.91 G#3 207.65 G#5 830.61 A1 55.00 A3 220.00 A5 880.00 A#1 58.27 A#3 233.08 A#5 932.33 B1 61.74 B3 246.94 B5 987.77 事实上，有从音符MIDI名称计算频率的公式： \\[ f = 440 \\cdot 2^{\\frac{n - 69}{12}} \\] 其中\\(f\\)是频率，单位是赫兹；\\(n\\)是MIDI音名，中央C的音名是60。 基于此，可以实现基于正弦波的编曲引擎。笔者写了一个简单的版本以供参考： import &#123;make_sound, play&#125; from &quot;sound&quot;; // Use MIDI number to represent note const get_freq = number =&gt; 440 * math_pow(2, (number - 69) / 12); // Single note wave generator function note_wave(number, loudness) &#123; const freq = get_freq(number); return t =&gt; loudness * math_sin(2 * math_PI * freq * t); &#125; // Chord wave generator function chord_wave(numbers, loudness) &#123; function iter(remains, cnt, cur_chord) &#123; return is_null(remains) ? cur_chord : iter(tail(remains), cnt + 1, t =&gt; (cnt / (cnt + 1)) * cur_chord(t) + note_wave(head(remains), 1 / (cnt + 1))(t)); &#125; const unit_chord = iter(numbers, 0, s =&gt; 0); return t =&gt; loudness * unit_chord(t); &#125; function make_melody(waves, durations) &#123; // Helper function to write durations onto time axis function get_timestamps(cur, acc) &#123; return is_null(cur) ? null : pair(acc + head(cur), get_timestamps(tail(cur), acc + head(cur))); &#125; // Whole duration of the melody // Use recursive progress to calculate everything again // Because loops are yet to be available function get_length(cur) &#123; return is_null(cur) ? 0 : head(cur) + get_length(tail(cur)); &#125; // Connect several waves together function wave_connect(waves, timestamps) &#123; return is_null(waves) ? t =&gt; 0 : t =&gt; t &lt; head(timestamps) ? head(waves)(t) : wave_connect(tail(waves), tail(timestamps))(t); &#125; const timestamps = get_timestamps(durations, 0); const length = get_length(durations); return make_sound(wave_connect(waves, timestamps), length); &#125; 以下这段使用示例代码生成了烂大街的4536251和弦进行： const c1 = chord_wave(list(60, 65, 69), 1); // IV const c2 = chord_wave(list(62, 67, 71), 1); // V const c3 = chord_wave(list(64, 67, 71), 1); // iii const c4 = chord_wave(list(64, 69, 72), 1); // vi const c5 = chord_wave(list(62, 65, 69), 1); // ii const c6 = chord_wave(list(62, 67, 71), 1); // V const c7 = chord_wave(list(60, 64, 67, 72), 1); // I const melody = make_melody(list(c1, c2, c3, c4, c5, c6, c7), list(1, 1, 1, 1, 1, 1, 2)); play(melody); Arcade_2d：2D游戏引擎 一个简陋的2D游戏引擎。简陋是指这个引擎只实现了一些最基本的功能，其他的比如物理模拟全部需要自己写。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://lonion1124.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"SICP","slug":"SICP","permalink":"https://lonion1124.github.io/tags/SICP/"},{"name":"编程基础","slug":"编程基础","permalink":"https://lonion1124.github.io/tags/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"}]},{"title":"数字逻辑设计：布尔代数","slug":"数字逻辑设计：布尔代数","date":"2025-03-03T16:00:00.000Z","updated":"2025-07-01T02:20:50.948Z","comments":true,"path":"posts/f3a91867bf5b/","permalink":"https://lonion1124.github.io/posts/f3a91867bf5b/","excerpt":"基本逻辑运算规则和规范，基于基本的门逻辑知识基础","text":"布尔代数（英语：Boolean algebra）在抽象代数中是指捕获了集合运算和逻辑运算二者的根本性质的一个代数结构（就是说一组元素和服从定义的公理的在这些元素上运算）。特别是，它处理集合运算交集、并集、补集；和逻辑运算与、或、非。 记号 与门：\\(F(A,B)=A\\times B\\) 或门：\\(F(A,B)=A+B\\) 非门：\\(F(A)=\\bar{A}\\)或\\(F(A)=A&#39;\\)或\\(F(A)=\\neg A\\) 运算规则 01律 \\[ \\bar{0}=1 \\] \\[ \\bar{1}=0 \\] \\[ 0\\times A=0 \\] \\[ 0+A=A \\] \\[ 1\\times A=A \\] \\[ 1+A=1 \\] 重复律 \\[ A\\times A=A \\] \\[ A+A=A \\] 互补律 \\[ A\\times \\bar{A}=0 \\] \\[ A+\\bar{A}=1 \\] 以上的恒等式常常用于化简代数式，即补入常数，进而因式分解或做其他操作。 交换律 \\[ A+B=B+A \\] \\[ A\\times B = B\\times A \\] 结合律 \\[ (A\\times B)\\times C=A\\times (B\\times C) \\] \\[ (A+B)+C=A+(B+C) \\] 分配律 \\[ A\\times (B+C)=A\\times B + A\\times C \\] \\[ A+B\\times C=(A+B)\\times (A+C) \\] 注意第二条等式（加对乘的分配律），证明考虑逆向推导。这个性质可用于化为POM标准型的场合（见下文）。 以上等式是显然的，使用真值表即可直观证明。证明过程略去。 吸收律 \\[ A+A\\times B=A \\] \\[ A\\times(A+B)=A \\] 证明第一式： \\[ A+A\\times B=A\\times 1+ A\\times B=A\\times(1+B)=A\\times 1=A \\] 利用对偶性质即可得到第二式（见下文）。 化简律 \\[ A+\\bar{A}\\times B=A+B \\] \\[ A\\times (\\bar{A}+B)=A\\times B \\] 证明第一式： \\[ A+\\bar{A}\\times B=(A+\\bar{A})\\times(A+B)=1\\times (A+B)=A+B \\] 同样利用对偶性质得到第二式。 归一律 \\[ A\\times B + \\bar{A}\\times C+B\\times C=A\\times B+\\bar{A}\\times C \\] \\[ (A+B)\\times (\\bar{A}+C)\\times (B+C)=(A+B)\\times (\\bar{A}+C) \\] 证明第一式： \\[ A\\times B + \\bar{A}\\times C+B\\times C=A\\times B\\times (C+\\bar{C})+\\bar{A}\\times (B+\\bar{B})\\times C+(A+\\bar{A})\\times B\\times C=A\\times B\\times C+A\\times B\\times \\bar{C}+\\bar{A}\\times B\\times C+\\bar{A}\\times \\bar{B}\\times C=A\\times B+\\bar{A}\\times B \\] 利用对偶得到第二式。 德摩根定律（De Morgan's Law） \\[ \\overline{A+B}=\\bar{A}\\times \\bar{B} \\] \\[ \\overline{A\\times B}=\\bar{A}+\\bar{B} \\] 可用真值表证明。 Break the line, change the line. 运算性质 换元性质（Substitution Theorem） 布尔代数遵循一般的换元规则。 对偶性质（Duality Theorem） 如果一个等式成立，那它的对偶亦成立 对偶：保持运算顺序，变量不变，与或互换，01互换。 前文各性质的两个等式都互为对偶。 互补性质（Complementary Theorem） 用于求反函数（指布尔输出相反的函数）。 互补：保持运算顺序，变量取反，与或互换，01互换。 事实上，直接用德摩根定律更直观。 规范型（Canonical Form） 对应于同样真值表的布尔表达式可能有很多种形式，这使得化简变得很有需要。为了更好地完成这份工作，规定了两种布尔表达式的规范型。 最小项之和（SOM） SOM: Sum-of-Minterm 最小项：当且仅当变量取某一值时为1，其余皆为0。 换句话说，就是把使输出为1的每一种变量情况或起来。 记号：当变量输入的十进制表示为\\(i\\)时，对应的最小项记为\\(m_i\\)。 输入的十进制表示：例如变量排序为A, B, C，输入情况为A=1, B=1, C=0，则十进制表示为(110)=6。 最大项之积（POM） POM: Product-of-Maxterm 最大项：当且仅当变量取某一值时为0，其余皆为1。 可以这样理解：所有最大项与起来，代表的变量情况就是使输出为1的那些。 记号：当变量输入的十进制表示为\\(i\\)时，对应的最小项记为\\(M_i\\)。 记法 \\[ F=m_{k_1}+m_{k_2}+\\dots +m_{k_n}=\\Sigma_{m}(k_1,k_2,\\dots,k_n) \\] \\[ F=M_{k_1}\\times M_{k_2}\\times \\dots \\times M_{k_n}=\\Pi_{M}(k_1,k_2,\\dots,k_n) \\] 例如，以下真值表： X Y F 0 0 1 0 1 0 1 0 1 1 1 0 有： \\[ F=\\bar{X}\\times\\bar{Y}+X\\times\\bar{Y}=m_0+m_2=\\Sigma_m(0,2) \\] \\[ F=(X+\\bar{Y})\\times(\\bar{X}+\\bar{Y})=M_1\\times M_3=\\Pi_M(1,3) \\] SOM与POM的转化 变量输入最小项取值与最大项取值互为补集。 例如，\\(\\Sigma_m(0, 1, 3, 5)=\\Pi_M(2, 4, 6, 7)\\)。 标准型（Standard Form） 得到规范型后进一步化简得到规范型。注意：规范型必须是和的积（POS）或者积的和（SOP）的形式。也就是说，电路图只有两层。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://lonion1124.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"数字逻辑设计","slug":"数字逻辑设计","permalink":"https://lonion1124.github.io/tags/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/"},{"name":"布尔代数","slug":"布尔代数","permalink":"https://lonion1124.github.io/tags/%E5%B8%83%E5%B0%94%E4%BB%A3%E6%95%B0/"}]},{"title":"Onion主题开发","slug":"Onion主题开发","date":"2024-11-09T16:00:00.000Z","updated":"2024-11-19T11:17:59.466Z","comments":true,"path":"posts/2a187cbf082d/","permalink":"https://lonion1124.github.io/posts/2a187cbf082d/","excerpt":"hexo主题Onion的开发过程与介绍","text":"本篇博客将重点放在更加感性化的关于Onion主题开发过程的回忆和记录上。对于hexo-onion的使用说明等技术性内容，我会简洁的写在其github仓库的README文件内。 写在前面 说实话，此刻我的心情是很激动的。此次开发的这个主题不仅是我真正意义上完成的第一个开发项目，更是我高中（准确地说，高二搭建这个博客）以来的宿愿。高中时苦于技术不足（虽然现在依然不足）和缺少时间，一直只能将这个愿望高高挂起。如今步入大学，我想是时候着手满足一下高中时期的缺憾了，于是Onion主题便应运而生。 首先，我要向一些人或物表示感谢，他们的协助对我的开发过程至关重要。 GitHub，一切的源头和支撑。 ChatGPT4o，它教会了我使用jQuery，还完美地帮我写了不少代码。 Bootstrap5，它的设计风格很符合我的审美，丰富的样式库更是令人惊喜。 hexo的许多插件的开发者们，好用的插件赋能便利的功能实现，大大提升开发效率。 所有我阅读的关于自主开发hexo主题的教程文章的作者。尤其是这一系列文章的作者smile-yan，没有他的文章，Onion主题就不会起步。 我的电脑。伟大无需多言。 我十分敬佩能够完成系列教程文章的作者们，他们的努力是极富意义的。 设计理念 Onion主题是一款极简风格、响应式的hexo主题。 主题的设计理念是使创作者能够专注于创作（不需要考虑除了普通Markdown格式之外的任何格式问题），并且使读者能够专注于文章内容，尽可能获得舒适的阅读体验。 主题支持更强大的Markdown渲染，本地搜索等功能[1]，并内置了一些实用的脚本功能，比如目录提取与聚焦、返回顶部等。 Onion主题的样式基于Bootstrap5框架，这使得我几乎没有自己编写任何一个css文件。我很喜欢Bootstrap5的设计风格，简洁而优雅，用起来也很方便。 不幸的是，使用Bootstrap5的方式是在元素内部指定class内容，这导致我难以为hexo根据内容渲染的网页内容指定样式。因此，我不得不采取网页脚本的方式为特定元素分配属性，我决定使用jQuery实现这一功能，因此为了正常使用本主题，请务必保证您的前端环境支持jQuery。 功能介绍 这部分更加详细的内容会放在介绍文档里。简单地说，除了一般的阅读功能外，我为Onion主题内置了如下功能： 本地搜索 代码高亮 LaTeX数学公式渲染 fancybox图片显示 按首字母排序的归档 自动目录提取 返回顶部按钮 i18n国际化支持 为了保证这些功能的正常运行，需要进行一些的插件的安装或者库的引用，具体方法在github仓库中给出。 开发思路 聊一聊我在部分内容开发时的思路，以及一些未竟的想法。有一种幕后花絮的感觉…… 导航栏和页脚 这部分参考了Bootstrap5官网给出的模板，加之小小个性化修改即成。只是单纯的懒。 主页 灵感同样来自于官网模板，借鉴了卡片样式，自主添加了文章封面图展示功能。 信息栏（页面侧边栏） 受到之前使用的Icarus主题的启发，我设计了挂件式的侧边信息展示栏。根据实际页面的不同，它会显示作者信息、文章封面图及摘要或者目录等，并且总是显示站点的分类和标签。我为各个挂件添加了对应的链接功能，方便阅读者实现站内快速跳转。 基本上，用于描述个人信息的文本我都进行了封装，使得Onion主题的使用者能够通过改编主题目录下的配置文件来修改显示信息。 文章页 标题显眼地放在最上方，右侧设计了信息框展示文章分类和发布时间（由于个人写作习惯，Onion主题被设计为适配单层文章分类，即一篇文章至多一个分类，但可以有多个标签）。标题栏下部展示了文章标签，若文章无标签则展示为占位框。 文章主内容框占据主要地位。为了整体美观，Onion主题会将md源文件中的h1、h2标题统一渲染为h3标题并添加下边框，其余标题渲染为h5。侧边栏自动提取文章目录的脚本会统一处理渲染后的h3标题而忽略h5标题。 我为Markdown文件中的大部分格式添加了对应的样式，相应的效果可以在本站的md测试文章里看到.比较值得一提的是Onion主题支持LaTeX渲染（需要加装插件）。 代码高亮基于highlight.js，支持指定语言显示。 我希望实现的效果是在保证创作过程的方便的基础上，尽量使得一切常用的md格式都可以美观且较为符合风格地显示。Onion主题的设计理念是赋能创作者无须在markdown文件里另外写任何除了元数据和普通md格式之外的格式内容，一切美化渲染的工作交给主题完成。我使用的是Typora编辑器，这意味着我只要保证文章在本地渲染正常，它在网页也会是显示正常的。 归档页 基于hexo插件的按首字母分类的归档功能。为什么不使用常用按年份归档而改为按首字母？一方面是由于首页文章已经按照发布时间排序了，另一方面我不认为按时间分类就效率而言比按标题分类更加有效率。对于想要查找文章的读者而言，按标题查找显然比按时间查找更为可行。 侧边弹出栏 提供了一个存放更多功能的接口，唯一的问题是我目前还没有足够多的功能放进去，因此，它现在仅仅是一个模板。可以在配置文件中选择关闭这个组件。 进一步美化 依据之前的经验，还可以为博客网站添加许多所谓的美化功能，比如随机动漫背景图，背景漂浮的线条或者雪花，鼠标点击事件，等等等等。我在两年前建站伊始十分沉迷于这一类小玩意的配置，然而在阅读其他类似的博客网的过程中，我意识到过于多的美化效果其实反而不利于聚焦阅读，这与Onion主题的设计理念背道而驰。因此，我不会在主题中内置任何花里胡哨的效果。当然，或许在后续的开发中我会单独为网站加一些美化效果，但是它们将会是独立的插件，不会与Onion主题合并。 我想要单独提的一点是看板娘。在建站初期我很魔怔地想要实现一个完美的看板娘，因此碰了不少钉子（详见我合并整理的2022年更新日志）。我承认我目前并没有完全地从魔怔的状态中走出来，因此可能未来我会为网站添加一个可爱的妹子。不过，出于前述的原因，她也不会与Onion主题有什么关系。 日后我可能会增加评论功能支持、更加复杂的文章标记和分类系统等等。总的来说，一切以加强创作和阅读体验为重。 总结 碍于本人水平有限，Onion主题的功能远谈不上强大。如果读者愿意尝试为自己的博客使用Onion主题并反馈意见[2]，我将感到十分荣幸。 出于学习交流的目的，我欢迎任何人对Onion主题的修改和增强。 最后，希望Onion主题能越来越好。 [1]部分功能需要安装插件，详见github仓库 ↩︎ [2]在首页可以找到我的邮箱 ↩︎","categories":[{"name":"开发日志","slug":"开发日志","permalink":"https://lonion1124.github.io/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"}],"tags":[{"name":"hexo-onion","slug":"hexo-onion","permalink":"https://lonion1124.github.io/tags/hexo-onion/"},{"name":"随笔","slug":"随笔","permalink":"https://lonion1124.github.io/tags/%E9%9A%8F%E7%AC%94/"},{"name":"前端","slug":"前端","permalink":"https://lonion1124.github.io/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"以前的更新日志汇总（2022-2023）","slug":"以前的更新日志汇总（2022-2023）","date":"2024-11-08T16:00:00.000Z","updated":"2024-11-20T02:39:35.585Z","comments":true,"path":"posts/533f6d81b26c/","permalink":"https://lonion1124.github.io/posts/533f6d81b26c/","excerpt":"这里记载了建站最初期的更新记录","text":"弄这个个人博客的初衷，其实没什么。我平时也没有特别明显的写日记一类的习惯，所以建立博客也可以说是一时兴起。不过建了才知道这玩意不容易搞，因此我希望我也能够尽我所能让这个地方充实起来。 目前我所在的城市还在因为疫情停课，这一天天的网课上的真的很磨人，不过这些都是没办法的事。不管怎样，衷心希望疫情快快退散。 个人博客里写的大概都是些废话，也许对其他人而言毫无价值，也许对我也毫无价值。但即便这样如果有人愿意来读一读的话我也会很开心。如果你把这个无聊的更新日志看到了这里，谢谢你。 2022.4.7更新 今天更新了icarus主题。 真是相当好看的主题~源码在这里 具体的设置还没来得及弄，简单把首页设置了一下。具体的应该之后几天会弄的吧（如果有时间）。高中党的痛你们不懂啊啊啊啊啊！ 配置什么的都在名字跟config有关的文件里，虽然里面东西好多，不过操作起来还算简单。 config n. [计]显示配置信息命令；配置，布局 主题还提供了评论等功能的插件，看上去很厉害的样子，有时间就弄。 顺带一提，点首页的关注会跳到我的b站账号（也不常用就是了）。 2022.4.8更新 网站运行初期，更新应该会比较频繁。 今天成功地把网站的favicon改成了我的头像（笑 团子 此外，今天依照着Icarus用户指南上面的内容把我能弄明白的大部分内容设置了一下。大概包括下列内容： 如上文提到的，更改了favicon 修改了顶部导航栏的一些内容，删去了\"about\"和\"download on git\"两个部分。 修改了不少挂件： 删去了订阅和关注两个我也不知道怎么用的功能 把目录栏放到了右边（只有在开启目录的文章的文章页面才看得到，比如说点进这篇文章 修改了右上角站长栏（叫自己站长感觉有点羞耻，但是莫名其妙地爽）里面的相关链接，把推特和脸书之类的东西换成了b站和网易云音乐 想了想还是把友链挂件给去了，因为我没有友好网站啊！路漫漫其修远兮…… 应该就这些，不过总感觉忘了些什么。昨天也是，明明把那些需要插件而报错的几个模块删掉了（比如分享和打赏），结果在写更新日志的时候忘掉了这件事。 顺带一提，评论功能真的好复杂，懒得搞…… 比起评论插件，我更想弄一个看板娘来 深夜重大更新 哈哈，什么叫做一不做，二不休啊（得意 锵锵~看板娘来了！ 找到一篇大佬的专门针对Icarus的教程（传送门）。对着里面猛一通操作之后总算是搞定了。 这个看板娘的模板应该是一个挺流行的多合一看板娘套装，我记得之前也在哪边看到过。里面整合了2233两位爷和其他好多妹子，应该说功能超级完善，只不过我还不会用。源码在这里。 2022.4.9更新 啊啊啊完全搞不懂看板娘怎么设置！虽然说默认的功能已经非常之香了，不过到底还是比不过DIY啊。目前还没有找到相关的教程，也完全无从下手。 （流下菜鸟的泪水） 今天把网站的logo换成了自制的样式，如下图： 用3d画图草草画的，感觉有点丑，不过我已经尽力了…… 再抱怨一下，github的速度真是太慢了。我每次加载自己的博客都跟蜗牛爬似的，以及上次说过的看板娘的问题。 昨天偶然翻到的一篇教程，里面有各种花里胡哨的博客美化方式。虽然里面看板娘的教程没有帮助到我，不过我根据里面的内容为博客添加了背景动态线和鼠标单击特效，感觉还不错。至少现在这个博客看起来有了一点生机~ 此外，还开启了自带的不蒜子统计功能，看看到时候我把博客分享出去后究竟能有几个人来看呐……总不会一个人都没有吧（小声 下午更新 找到一篇讲解看板娘设置的教程，学会了修改看板娘位置的方法。不过那个toggle图标总是弄不好，因此最后还是没有更改位置。还有一个原因是Icarus的两栏布局有点问题，如果左侧挂件挂到右边而左侧置空时，中间文章的位置不会自动调整，我也不会手动修改，所以最后什么都没有弄。 另外，根据教程里的说法，这个看板娘的模型来源是通过某个接口弄来的在线玩意，然后那个接口好像没有大陆服务，所以这么慢（此消息有待证实）。如果这样的话那么加载慢的原因就算是找到了。网上说解决办法是自建一个接口……太复杂了我不想弄。就这样吧。 我觉得如果要添加模型的话，这个复杂的路子恐怕是必须要弄明白的……任重而道远啊。 2022.4.10更新 经过这几天的涂涂改改，小站已经基本上有了一个博客网站的样子。虽然说还有许多花里胡哨的美化可以添加，不过正如那篇文章里说的： 创作第一，体验第二，避免繁杂，简洁为上！ 所以重不在量而在质。才不是为我太菜找借口！ 话说回来，折腾了好久，我终于决定放弃优化我的看板娘。实在不会。尝试了自建api不过失败得很惨。就这样吧。已经很可爱了不是么？ 还是说说今天更改了哪些内容吧。 更换了个人头像。黄色团子实在太多了，换了个黑白团子…… 把看板娘的大小调小了一点，从300px到250px，这样就不会影响阅读和点击或者挡住底部的统计数据了。 把顶部导航栏的内容换成了中文，方便阅读 挂上了友链挂件。希望之后能有更多友链~ 此外，按照csdn一篇关于icarus主题的说法，有几个优化速度的小技巧，也一并设置了。虽然好像没什么效果，不过聊胜于无嘛。 之后中心应该就不在更新上了，更新日志的数量应该也会减少。期待第一篇正式博客的发表。 （刚刚写的时候想到了要更改的地方，可是现在怎么也想不起来……老了老了。） 深夜更新 想起来要干啥了……每次载入网页的时候会有一个蓝色进度条动画，但是因为本来速度就慢所以看得让人很不爽。索性关闭了这个插件。另外，本来想顺手把看板娘的透明度调一下，但是总感觉哪边怪怪的，所以又换了回来。反正现在的大小也不会影响阅读，再加上看板娘有切换是否显示功能，咱就不搞这些消失play什么的啦~ 2022.4.11更新 把个人头像的黑白团子换回了黄色团子，然后把网站logo的黄色团子换成了黑白团子，这样看上去更整洁一点。另外，修改了个人资料挂件的相关链接。另外，把背景动态线的源码拷贝到了本地。再拷贝的时候我灵光一闪，感觉我找到了本地化看板娘api的方法以及之前失败的原因：没有先行部署。然后我解决了问题，之后发现—— 加载速度更慢了。 好吧github还不如外源api。这下我是彻底放弃了。就这样吧。 2022.4.13更新 修复了看板娘功能按钮大小不匹配导致退出按钮消失的bug。 2022.4.16更新 去除了左边栏的个人信息块，让整体观感好了一点。 修改了左边栏挂件的先后顺序。 2022.4.23更新 将左侧个人信息块美化一些后又加了回来。本来是想添加一个动态文字的效果的，不过没有成功。 2022.5.26更新 哇一晃一个月了。最近没什么时间写文章，预计之后会有博客更新…… 今天猛然发现看板娘消失了！好一番折腾之后，经过比对live2d-widget里的autoload(在github开源地址这里)之后才发现原来是之前储存看板娘模型的网址换地方了。 现在的api地址是这里。 这个月没什么空管博客，所以更新记录就一份。本来还是和6月份的合在一起的，后来想想为了整齐一点就单独开一个文档了。 2022.6.1更新 为了使文章不那么拥挤，将目录挂件移到了左侧，同时减小了左侧栏宽度 根据这篇教程里的指示维持了目录栏的粘滞特性，不让它随滚动消失 缩小了看板娘尺寸（250px→225px），以方便阅读 暂时删去了友链板块，因为感觉没什么用…… 目前正在犹豫是否要给网站增加背景图。 2022.6.2更新 根据昨天的那篇教程，将侧边栏的底色半透明化了，配合背景的动画效果看上去会更加美观一些 给网页上的各板块增加了鼠标移动到相应位置时浮动阴影加深的动画效果 修改了标签挂件中标签的显示颜色，让它看上去不那么突兀 针对文章阅读页面，做出了下列优化： 在版权模块下面增加了一根分割线 修改了标签的图标 针对首页的文章速览，做出了下列优化： 将发布日期、更新日期的时间格式更改为数字的“年-月-日”，并增加了图标 增加了一根分割线 修改了“阅读更多”按钮的样式，顺便把”更多“改成了”全文“，听上去更顺一点 注：以上更改均根据这篇教程中的内容 昨天缩小了看板娘，结果又忘记缩小配套的图标了。今天修复了这个问题，顺便调整了看板娘说话栏的大小 根据官方文档修改了文章页面的挂件显示规则 加宽了页面宽度，代价是看板娘又挡掉了一点东西……算了，一切以阅读体验优先…… 删除了针对文章的访客统计功能。其实我很喜欢这个功能，不过它出bug了，统计的并非各个文章的访问次数而是总访问次数。我猜可能是因为文章标题有中文导致无法识别的原因？搞不懂…… 更新了站首语 另外网站的加载速度是越来越慢了……不知道怎么搞…… 2022.6.3更新 把首页的个人头像加了回去 修改了文章页的挂件类型 另外看板娘的飞机彩蛋不知道为什么失灵了…… 2022.6.8更新 把首页的头像去了白底。之前因为没有给挂件底色加透明度所以有没有白底都看不出来，前几天加了透明之后头像的白底就很突兀，今天便解决掉这个问题。利用的工具是这个网站。 2022.6.21更新 将看板娘工具上调了10px。 2022.7.9更新 换了新电脑，因此重新安装了git、node，并且设置了本地与GitHub端的链接。 2022.8.10更新 呼！终于完成了更换电脑后博客的重生…… 详情可以参考我写的博客里的记录。 2022.8.13更新 为了解决博客页面过于单调的问题，今天添加了随机背景动漫图片。 将此篇文章里更改背景中的图片地址换成随机的图片api接口即可。 随后，为了美观，还更改了顶部栏、底部栏的颜色和不透明度，并将文章栏（在不影响阅读的基础上）也设置为了半透明。 顺便把网站logo的白底给去了。 本来我是想不加背景而更改网站配色的，不过这个博客主题的配色方案修改起来非常复杂，就放弃了。 此外，由于添加了背景，动态线条的特效也被我删去了。这导致了整个网站看上去一动不动。本来为了优化此问题，我打算添加自动下雪的效果，可是效果并不理想（有一个效果理想的模板，可我不会用），遂放弃。 能力还是太差了啊，唉。 另外，给看板娘加了几句话。 本来还想修改一下网站字体，可惜googlefonts上不去。算了。 还有，把鼠标单击特效改成了随机颜色。 傍晚更新 我都佩服我自己。之前我说： 本来为了优化此问题，我打算添加自动下雪的效果，可是效果并不理想（有一个效果理想的模板，可我不会用），遂放弃。 但是我没有死心，经过不懈的折腾，我成功地为博客加入了美丽的3d下雪效果。 代码来自这里。 不过，这里只提供了最原始的html代码，具体整合进入icarus的方法是我摸出来的。（我没有一点前端或者后端知识，真就全是连蒙带猜靠直觉。） 为此，我专门写了一篇文章来记录搭建此功能的过程。 另外，不知发生了什么事，网站的字体出了一点问题（我什么也没做啊，真奇怪）。总之把head.jsx里的cyberpunk注释掉，换回了default就正常了。（为什么默认会是cyberpunk啊？） 在页面变小的时候，顶部栏会分为两行，此时下面一行的颜色不知道怎么更改。试着修改了\"node_modules-stylus.styl\"里的参数（第一行由$scheme-main变为rgba(255,255,255,0.7)），有变化但是不知道为什么还是不一样。实在没辙，将就一下吧…… 2022.8.14更新 昨天的颜色透明度问题依然没有解决，不过这次尝试直接更改\"node_modules-stylus-variables.styl\"里的预设颜色配置，虽然效果没变化，不过起码修改起来方便。而且由于修改的是默认配置，因此也不用担心整体的不协调。（现在所有默认白色都有透明效果啦！） 本来想着加一个背景音乐播放器，不过不会弄而且感觉用处不大，遂作罢。 2022.9.11更新 由于不知道什么原因，看板娘的图片一直无法加载成功，与之相对的各类功能和聊天消息倒是可以，这说明是应该是后端有什么变动，但我尚不知道原因以及解决方法……只能忍痛切割了看板娘功能。有朝一日一定要自建一个稳定的看板娘。","categories":[{"name":"开发日志","slug":"开发日志","permalink":"https://lonion1124.github.io/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"}],"tags":[]},{"title":"Markdown渲染示例","slug":"markdown渲染示例","date":"2024-10-31T16:00:00.000Z","updated":"2025-01-02T13:45:01.616Z","comments":true,"path":"posts/36856836d52b/","permalink":"https://lonion1124.github.io/posts/36856836d52b/","excerpt":"","text":"1. 排版 粗体 斜体 删除线 引用: Onion主题为大部分Markdown格式配置了样式 有序列表: 项目1 项目2 项目3 无序列表: 项目1 项目2 项目3 2. 图片与链接 图片: 链接: Onion主题Github仓库 3. 标题 Onion主题会将h1、h2标题统一渲染为h3标题并添加下边框，其余标题渲染为h5。 4. 代码 行内代码块实例：hello world，git bash here 整块代码高亮示例（代码来自GPT4）: #include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;cmath&gt; using namespace std; class Rectangle &#123; public: Rectangle(double w, double h) : width(w), height(h) &#123;&#125; double area() &#123; return width * height; &#125; double perimeter() &#123; return 2 * (width + height); &#125; private: double width, height; &#125;; int main() &#123; cout &lt;&lt; &quot;C++ Syntax Test&quot; &lt;&lt; endl; vector&lt;int&gt; numbers = &#123;1, 2, 3, 4, 5&#125;; for (int i : numbers) &#123; cout &lt;&lt; &quot;Number: &quot; &lt;&lt; i &lt;&lt; endl; &#125; Rectangle rect(10.5, 20.3); cout &lt;&lt; &quot;Area: &quot; &lt;&lt; rect.area() &lt;&lt; endl; cout &lt;&lt; &quot;Perimeter: &quot; &lt;&lt; rect.perimeter() &lt;&lt; endl; return 0; &#125; import math class Circle: def __init__(self, radius): self.radius = radius def area(self): return math.pi * self.radius ** 2 def perimeter(self): return 2 * math.pi * self.radius if __name__ == &quot;__main__&quot;: print(&quot;Python Syntax Test&quot;) numbers = [1, 2, 3, 4, 5] for num in numbers: print(f&quot;Number: &#123;num&#125;&quot;) circle = Circle(10) print(f&quot;Area: &#123;circle.area()&#125;&quot;) print(f&quot;Perimeter: &#123;circle.perimeter()&#125;&quot;) &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;HTML Syntax Test&lt;/title&gt; &lt;style&gt; body &#123; font-family: Arial, sans-serif; background-color: #f4f4f4; &#125; h1 &#123; color: #333; &#125; .highlight &#123; color: #0077cc; font-weight: bold; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;HTML Syntax Test&lt;/h1&gt; &lt;p&gt;Here is some text with &lt;span class=&quot;highlight&quot;&gt;highlighted text&lt;/span&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Item 1&lt;/li&gt; &lt;li&gt;Item 2&lt;/li&gt; &lt;li&gt;Item 3&lt;/li&gt; &lt;/ul&gt; &lt;button onclick=&quot;alert(&#39;Button clicked!&#39;)&quot;&gt;Click Me&lt;/button&gt; &lt;/body&gt; &lt;/html&gt; function greet(name) &#123; return `Hello, $&#123;name&#125;!`; &#125; const numbers = [10, 20, 30, 40, 50]; let sum = 0; numbers.forEach(num =&gt; &#123; sum += num; console.log(`Number: $&#123;num&#125;, Current Sum: $&#123;sum&#125;`); &#125;); const person = &#123; name: &quot;Alice&quot;, age: 25, greet: function() &#123; console.log(greet(this.name)); &#125; &#125;; person.greet(); const factorial = (n) =&gt; &#123; return (n === 0 || n === 1) ? 1 : n * factorial(n - 1); &#125;; console.log(`Factorial of 5: $&#123;factorial(5)&#125;`); 5. 表格 Item Value Computer $1600 Phone $12 Pipe $1 可以指定对齐方式, 如Item列左对齐, Value列右对齐, Qty列居中对齐 Item Value Qty Computer $1600 5 Phone $12 12 Pipe $1 234 6. Html 标签 支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格： 值班人员 星期一 星期二 星期三 李强 张明 王平 提示, 如果想对图片的宽度和高度进行控制, 你也可以通过img标签, 如: 7. 脚注 basic footnote[1] here is an inline footnote[2] and another one[3] and another one[4] 8. LaTeX 公式 行内公式： 质能守恒方程可以用一个很简洁的方程式\\(E=mc^2\\)来表达。 整行公式： \\[ \\frac{1}{2} + \\frac{3}{4} = \\frac{5}{4} \\] \\[ \\frac{d}{dx} \\left( x^2 + 3x + 2 \\right) = 2x + 3 \\] \\[ lim_{x \\to 0} \\frac{\\sin x}{x} = 1 \\] \\[ A = \\begin{pmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{pmatrix} \\] \\[ \\sin x = \\sum_{n=0}^{\\infty} (-1)^n \\frac{x^{2n+1}}{(2n+1)!} \\] [1]basic footnote content ↩︎ [2]inline footnote ↩︎ [3]paragraph footnote content ↩︎ [4]footnote content with some markdown ↩︎","categories":[],"tags":[]},{"title":"在hexo+Icarus4.x搭建的博客上添加3D飘雪效果","slug":"在hexo+Icarus4.x搭建的博客上添加3D飘雪效果","date":"2022-08-12T16:00:00.000Z","updated":"2022-08-12T16:00:00.000Z","comments":true,"path":"posts/84656f9a144d/","permalink":"https://lonion1124.github.io/posts/84656f9a144d/","excerpt":"是雪啊！（喜","text":"今天由于全站大美化升级，我便想着添加一个飘雪效果（虽然现在是夏天）。不过网上大部分的文章中提供的下雪绘制算法都较为简单粗糙，效果不甚美观，也缺乏针对icarus主题的安装方法（这个主题真是挺小众的……）。在找到一个很漂亮的飘雪算法后，看到安装指南只提供了html源码，没有半点相关知识的我本来是果断选择放弃的，但是我没有死心，连蒙带猜地试了几下之后竟然成功了！我都佩服我自己……不过这也是多亏了我之前各种瞎折腾的经历。 本文就记录一下在hexo+Icarus4.x搭建的博客上添加3D飘雪效果的步骤，方便其他与我状况类似的人的使用。 下载资源 请见这里。 注：资源不保证一直有效 资源正常，则会得到名为snow.js的文件。 此外，还会有如下代码，可以一并复制（此代码有些小问题，建议直接使用后文里提供的）： &lt;script type=&quot;text/javascript&quot; src=&quot;http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;snow.js&quot;&gt;&lt;/script&gt; &lt;style type=&quot;text/css&quot;&gt; .snow-container&#123; position:fixed; top:0;left:0; width:100%; height:100%; pointer-events:none; z-index:100001; &#125; &lt;/style&gt; &lt;div class=&quot;snow-container&quot;&gt;&lt;/div&gt; 部署代码 将“snow.js”放入“source/js/”文件夹（根路径为博客根目录+”/themes/icarus/“，下同）。 在“layout/”文件夹中找到“layout.jsx”文件，在body标签内（即“&lt;/body&gt;”之前）加入如下代码： &lt;script type=&quot;text/javascript&quot; src=&quot;http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/snow.js&quot;&gt;&lt;/script&gt; &lt;div class=&quot;snow-container&quot;&gt;&lt;/div&gt; 当然如果文件中已经引用过JQuery的，前两行可以不用加。 在“source/css/”文件夹中新建一个“custom.styl”文件，在其中写入如下代码： .snow-container &#123; position: fixed; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; z-index: 100001; &#125; 注：关于custom.styl的更多神奇用法，可以参考这篇教程。 在“source/css/”文件夹中找到“style.styl”文件，在最后一行加入下列代码： @import &#39;./custom&#39; 其功能是引入刚刚新建的“custom.styl”。 大功告成！在根目录进入git bash，使用下列代码查看效果： hexo g hexo s 正常的话就可以部署了！ 结语 博客美化毕竟是锦上添花，有人喜欢花里胡哨，有人喜欢极简。Icarus主题其实是走极简风的，不过在我的魔改下变得逐渐生动起来。但是博客到底重在内容，创作第一，美化其次。","categories":[{"name":"技术指南","slug":"技术指南","permalink":"https://lonion1124.github.io/categories/%E6%8A%80%E6%9C%AF%E6%8C%87%E5%8D%97/"}],"tags":[]},{"title":"关于换电脑之后的博客部署","slug":"关于换电脑之后的博客部署","date":"2022-08-09T16:00:00.000Z","updated":"2022-08-09T16:00:00.000Z","comments":true,"path":"posts/d9e0a0273050/","permalink":"https://lonion1124.github.io/posts/d9e0a0273050/","excerpt":"换电脑之后如何继续让博客正常运转呢？","text":"大概在两个半月前，我的戴尔电脑暴毙了。 虽然很伤心，不过伤心的是陪我4年的朋友突然离去。该骂还是要骂：实体店那帮人塞给我的这个型号的品控是真的不行。不过其中也有当年我购买设备经验不足（千万别去实体店！）导致的诸多因素在内，所以也没什么可以怨恨的。总之只能接受这个事实。现在我的网购新电脑到了，使用体验良好，所以就这样吧……这也许就是有了新欢忘了旧爱吧（笑 然后，关于这个个人博客，由于它的运行原理是本地文件部署至github仓库，所以在更换电脑之后就要重新设置其中的连接。我将其步骤记录在这篇文章里（我希望5年内我不会再用到这个）。 顺带一提，我7月中旬就写好了这篇博客，这是因为我当时以为我已经成功了，然而事实证明我根本没有成功。但是之后因为各种各样的事情耽误了，于是就拖到现在。 主要的步骤来源于这篇博客。 安装必要程序 新电脑上需要重新安装Node.js和Git 可以参考这篇博客。 拷贝原来的本地文件 好在我的硬盘没坏，里面的文件可以拷贝出来。 将原来的本地文件（即根目录）拷贝至新电脑。我依然是在D盘里建立了blog文件夹存放相关文件。 安装hexo 在刚刚拷贝的文件夹中右键，选择“git bash here”，然后键入下列代码： npm install hexo-cli -g 即可安装hexo 注意，需要在博客本地文件的文件夹中安装。 接着键入如下代码检查是否安装成功： hexo -v 注1：7月份这一步没有成功，这是因为新电脑配备了禁止运行脚本的安全策略。通过这里介绍的方法可以将该策略修改。 注2：因为魔法原因，npm的下载速度很慢，所以后来我使用了cnpm（即npm中国版）代为下载。操作方法见这里。 注3：7月份失败的另一个原因是电脑阻止了npm的安装程序安装hexo，解决这个问题的方法是在git bash窗口中运行以下代码： cnpm install --force 生成新电脑的ssh值 还是在“git bash here”里面，输入下列代码： ssh-keygen -t rsa -C &quot;邮箱地址&quot; 其中“邮箱地址”（含引号）替换为在注册github时绑定的邮箱地址。 然后连续点回车直到该命令执行结束。 接着，在它打印的语句中找到其中有一个“id_rsa.pub”的文件路径，通过这个路径打开这个文件（用记事本打开即可），里面就是新电脑的ssh值。 将ssh添加至github 登录网页端github，点击右上角个人头像，在下拉菜单中选择“settings”选项，然后在右边栏选择“SSH and GPG keys”，点击“new SSH keys”，取名并将刚才生成的ssh值复制进去。 添加成功后，在“SSH and GPG keys”界面中会出现刚刚新添加的内容。 换源 最后一步了！ 回到本地博客文件夹，进入“git bash here”窗口。 键入下列代码 npm config set registry &quot;repository地址&quot; 其中“repository地址”（含引号）替换为原先的配置文件（“_config.yml”，应该在根目录中）里面的“repository: ”之后的网址。 这一步成功后，就可以像之前一样写博客上传了。 感想 真是相当麻烦……当然，主要是因为我并非专业人员，仅仅是一介学生罢了。不过即使是在学生中，也不乏诸多技术高到令人瞠目结舌的人物。因此，这也不是抱怨的借口。 这个博客从4月初运行至今，正经文章没写几篇，大部分时间都花在各种折腾与优化上了。在折腾的过程中，我也认识到，折腾总是会结束的。不是我与困难达成共识，就是困难与我达成共识，终归到底是我与自己达成共识。总之，这个博客我希望一直能运行下去，路漫漫其修远兮，吾将上下而求索。","categories":[{"name":"技术指南","slug":"技术指南","permalink":"https://lonion1124.github.io/categories/%E6%8A%80%E6%9C%AF%E6%8C%87%E5%8D%97/"}],"tags":[]}],"categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://lonion1124.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"开发日志","slug":"开发日志","permalink":"https://lonion1124.github.io/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"},{"name":"技术指南","slug":"技术指南","permalink":"https://lonion1124.github.io/categories/%E6%8A%80%E6%9C%AF%E6%8C%87%E5%8D%97/"}],"tags":[{"name":"SICP","slug":"SICP","permalink":"https://lonion1124.github.io/tags/SICP/"},{"name":"编程基础","slug":"编程基础","permalink":"https://lonion1124.github.io/tags/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"},{"name":"数字逻辑设计","slug":"数字逻辑设计","permalink":"https://lonion1124.github.io/tags/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/"},{"name":"布尔代数","slug":"布尔代数","permalink":"https://lonion1124.github.io/tags/%E5%B8%83%E5%B0%94%E4%BB%A3%E6%95%B0/"},{"name":"hexo-onion","slug":"hexo-onion","permalink":"https://lonion1124.github.io/tags/hexo-onion/"},{"name":"随笔","slug":"随笔","permalink":"https://lonion1124.github.io/tags/%E9%9A%8F%E7%AC%94/"},{"name":"前端","slug":"前端","permalink":"https://lonion1124.github.io/tags/%E5%89%8D%E7%AB%AF/"}]}